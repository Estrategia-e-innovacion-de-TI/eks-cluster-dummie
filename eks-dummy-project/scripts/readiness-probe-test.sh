#!/bin/bash

# Script para simular error de Readiness Probe en EKS
# Escenario: Readiness probe mal configurado - pod Running pero no Ready

set -e

NAMESPACE="readiness-probe-test"
DEPLOYMENT="readiness-probe-app"
SERVICE="readiness-probe-service"
CLUSTER_NAME="eks-dummy-test"
REGION="us-east-1"  # Cambia esto si tu cluster est√° en otra regi√≥n

# 0. Verifica si el cluster EKS existe
if ! aws eks --region "$REGION" describe-cluster --name "$CLUSTER_NAME" >/dev/null 2>&1; then
  echo "‚ùå El cluster EKS '$CLUSTER_NAME' no existe en la regi√≥n '$REGION'."
  echo "No se puede ejecutar el escenario de Readiness Probe. Saliendo."
  exit 0
fi

# 1. Actualiza el kubeconfig para el cluster EKS
aws eks --region "$REGION" update-kubeconfig --name "$CLUSTER_NAME"

echo "üöÄ Iniciando escenario de prueba: Error de Readiness Probe"
echo "========================================================="

# Funci√≥n para mostrar estado de los pods
show_pod_status() {
    echo "üìä Estado actual de los pods:"
    kubectl get pods -n $NAMESPACE -o wide
    echo ""
}

# Funci√≥n para mostrar estado del servicio
show_service_status() {
    echo "üîó Estado del servicio:"
    kubectl get svc -n $NAMESPACE
    echo ""
    echo "üìã Endpoints del servicio:"
    kubectl get endpoints -n $NAMESPACE
    echo ""
}

# Funci√≥n para mostrar eventos del namespace
show_events() {
    echo "üìÖ Eventos del namespace $NAMESPACE:"
    kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -10
    echo ""
}

# Funci√≥n para mostrar logs de readiness probe
show_readiness_logs() {
    local pod_name=$1
    echo "üîç Logs de readiness probe del pod $pod_name:"
    kubectl logs $pod_name -n $NAMESPACE --tail=10 || echo "No se pudieron obtener logs"
    echo ""
}

# Paso 1: Crear namespace y deployment con readiness probe mal configurado
echo "1Ô∏è‚É£ Creando namespace y deployment con readiness probe mal configurado..."
kubectl apply -f ../kubernetes/readiness-probe-scenario.yaml

echo "‚è≥ Esperando que los pods se inicien..."
sleep 30

echo "‚úÖ Deployment desplegado con readiness probe mal configurado"
show_pod_status

# Paso 2: Observar el problema - pods Running pero no Ready
echo "2Ô∏è‚É£ üîç OBSERVANDO EL PROBLEMA: Pods Running pero no Ready..."
echo "Los pods deber√≠an aparecer como Running pero con 0/1 en READY"
show_pod_status

echo "üìã Estado del servicio (no deber√≠a tener endpoints):"
show_service_status

# Paso 3: Analizar eventos y logs
echo "3Ô∏è‚É£ üìä ANALIZANDO EVENTOS Y LOGS..."
show_events

echo "üìã Logs de readiness probe fallando:"
for pod in $(kubectl get pods -n $NAMESPACE -l app=$DEPLOYMENT -o jsonpath='{.items[*].metadata.name}'); do
    echo "--- Pod: $pod ---"
    show_readiness_logs $pod
done

# Paso 4: Diagn√≥stico detallado
echo "4Ô∏è‚É£ üîç DIAGN√ìSTICO DETALLADO"
echo "============================"

echo "üìä Descripci√≥n detallada de los pods:"
kubectl describe pods -n $NAMESPACE -l app=$DEPLOYMENT

echo ""
echo "üîß Configuraci√≥n actual del deployment:"
kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o yaml | grep -A 20 "readinessProbe:"

echo ""
echo "üìà M√©tricas de readiness probe:"
kubectl get pods -n $NAMESPACE -l app=$DEPLOYMENT -o jsonpath='{range .items[*]}{.metadata.name}{": Ready="}{.status.containerStatuses[0].ready}{" Restarts="}{.status.containerStatuses[0].restartCount}{"\n"}{end}'

# Paso 5: Simular acceso al servicio (deber√≠a fallar)
# echo ""
# echo "5Ô∏è‚É£ üåê SIMULANDO ACCESO AL SERVICIO..."
# echo "Intentando acceder al servicio (deber√≠a fallar porque no hay endpoints):"
# kubectl run test-access --image=busybox --rm -it --restart=Never -n $NAMESPACE -- wget -qO- http://$SERVICE.$NAMESPACE.svc.cluster.local || echo "‚ùå Acceso fall√≥ - no hay endpoints disponibles"

# Paso 6: Soluci√≥n - aplicar configuraci√≥n corregida
# echo ""
# echo "6Ô∏è‚É£ üîß SOLUCIONANDO EL PROBLEMA: Aplicando readiness probe corregido..."
# kubectl apply -f ../kubernetes/readiness-probe-fixed.yaml

# echo "‚è≥ Esperando que los pods se vuelvan Ready..."
# sleep 30

# echo "‚úÖ Estado despu√©s de la correcci√≥n:"
# show_pod_status

# echo "üìã Estado del servicio despu√©s de la correcci√≥n:"
# show_service_status

# Paso 7: Verificar que el servicio funciona
# echo ""
# echo "7Ô∏è‚É£ ‚úÖ VERIFICANDO QUE EL SERVICIO FUNCIONA..."
# echo "Intentando acceder al servicio (deber√≠a funcionar ahora):"
# kubectl run test-access-fixed --image=busybox --rm -it --restart=Never -n $NAMESPACE -- wget -qO- http://$SERVICE.$NAMESPACE.svc.cluster.local || echo "‚ùå Acceso a√∫n falla"

echo ""
echo "üéØ RESUMEN DEL ESCENARIO:"
echo "========================="
echo "‚úÖ Se cre√≥ un deployment con readiness probe mal configurado"
echo "‚úÖ Los pods se mantuvieron Running pero no Ready (0/1)"
echo "‚úÖ El servicio no tiene endpoints disponibles"
echo "‚úÖ Se diagnostic√≥ el problema mediante eventos y logs"
echo "‚ö†Ô∏è  EL PROBLEMA PERMANECE ACTIVO - Revisa tu cuenta AWS para ver el estado"
echo ""
echo "üìö LECCIONES APRENDIDAS:"
echo "- Los readiness probes son cr√≠ticos para la disponibilidad del servicio"
echo "- Un pod puede estar Running pero no Ready si falla el readiness probe"
echo "- Los servicios solo env√≠an tr√°fico a pods Ready"
echo "- Los eventos de Kubernetes son esenciales para diagnosticar problemas de health checks"
echo "- CloudWatch puede monitorear m√©tricas de readiness y liveness probes"
echo ""
echo "üîç Para ver el estado en AWS:"
echo "   - Revisa CloudWatch Logs: /aws/eks/$CLUSTER_NAME/application/readiness-probe-test"
echo "   - Verifica m√©tricas de EKS en CloudWatch"
echo "   - Revisa eventos del cluster en la consola de EKS" 