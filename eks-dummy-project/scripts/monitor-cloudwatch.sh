#!/bin/bash

# Script para simular monitoreo de CloudWatch Logs
# En un entorno real, esto se conectar√≠a a AWS CloudWatch

NAMESPACE="configmap-test"
DEPLOYMENT="config-dependent-app"

echo "üìä MONITOREO DE CLOUDWATCH LOGS"
echo "==============================="
echo "Simulando monitoreo de logs en CloudWatch..."
echo ""

# Funci√≥n para simular consultas de CloudWatch
simulate_cloudwatch_query() {
    local query_name=$1
    local description=$2
    
    echo "üîç Consulta: $query_name"
    echo "Descripci√≥n: $description"
    echo "Resultados simulados:"
    
    case $query_name in
        "error_logs")
            echo "2024-01-15T10:30:15Z [ERROR] ERROR: API_KEY is not set!"
            echo "2024-01-15T10:30:16Z [ERROR] ERROR: API_KEY is not set!"
            echo "2024-01-15T10:30:17Z [ERROR] ERROR: API_KEY is not set!"
            echo "2024-01-15T10:30:18Z [ERROR] ERROR: API_KEY is not set!"
            ;;
        "pod_restarts")
            echo "Pod: config-dependent-app-abc123 - Restarts: 5"
            echo "Pod: config-dependent-app-def456 - Restarts: 5"
            echo "Status: CrashLoopBackOff"
            ;;
        "application_logs")
            echo "2024-01-15T10:25:00Z [INFO] Starting application..."
            echo "2024-01-15T10:25:01Z [INFO] Checking required configuration..."
            echo "2024-01-15T10:25:02Z [INFO] Configuration validation passed"
            echo "2024-01-15T10:25:03Z [INFO] Application running normally - Counter: 1"
            ;;
        "kubernetes_events")
            echo "2024-01-15T10:30:00Z [WARNING] Pod config-dependent-app-abc123 restarted"
            echo "2024-01-15T10:30:05Z [WARNING] Pod config-dependent-app-def456 restarted"
            echo "2024-01-15T10:30:10Z [ERROR] Pod config-dependent-app-abc123 failed to start"
            echo "2024-01-15T10:30:15Z [ERROR] Pod config-dependent-app-def456 failed to start"
            ;;
    esac
    echo ""
}

# Funci√≥n para mostrar m√©tricas de CloudWatch
show_cloudwatch_metrics() {
    echo "üìà M√âTRICAS DE CLOUDWATCH"
    echo "========================"
    
    echo "üîÑ Tasa de reinicio de pods:"
    echo "  - √öltima hora: 12 reinicios"
    echo "  - √öltimas 24 horas: 48 reinicios"
    echo "  - Tendencia: ‚¨ÜÔ∏è Aumentando"
    echo ""
    
    echo "üö® Alertas activas:"
    echo "  - PodRestartRate > 5/minuto"
    echo "  - ErrorLogRate > 10/minuto"
    echo "  - PodCrashLoopBackOff = true"
    echo ""
    
    echo "üìä Estado de salud del cluster:"
    echo "  - CPU Usage: 45%"
    echo "  - Memory Usage: 62%"
    echo "  - Pod Success Rate: 85%"
    echo ""
}

# Funci√≥n para mostrar dashboard de CloudWatch
show_cloudwatch_dashboard() {
    echo "üñ•Ô∏è DASHBOARD DE CLOUDWATCH"
    echo "========================="
    
    echo "üìã Log Groups activos:"
    echo "  - /aws/eks/configmap-test/cluster"
    echo "  - /aws/eks/configmap-test/application"
    echo "  - /aws/eks/configmap-test/kubernetes"
    echo ""
    
    echo "üîç Consultas √∫tiles para diagn√≥stico:"
    echo "1. Buscar errores de configuraci√≥n:"
    echo "   fields @timestamp, @message"
    echo "   | filter @message like /ERROR.*not set/"
    echo "   | sort @timestamp desc"
    echo ""
    
    echo "2. Contar reinicios de pods:"
    echo "   fields @timestamp, @message"
    echo "   | filter @message like /Pod.*restarted/"
    echo "   | stats count() by bin(5m)"
    echo ""
    
    echo "3. An√°lisis de logs de aplicaci√≥n:"
    echo "   fields @timestamp, @message"
    echo "   | filter @message like /Starting application|Configuration validation/"
    echo "   | sort @timestamp desc"
    echo ""
}

# Funci√≥n para mostrar alertas de CloudWatch
show_cloudwatch_alerts() {
    echo "üö® ALERTAS DE CLOUDWATCH"
    echo "======================="
    
    echo "üî¥ Alertas cr√≠ticas:"
    echo "  - [CR√çTICO] Tasa de reinicio de pods excede 5/minuto"
    echo "  - [CR√çTICO] Error rate > 50% en los √∫ltimos 5 minutos"
    echo "  - [CR√çTICO] Pods en CrashLoopBackOff por m√°s de 10 minutos"
    echo ""
    
    echo "üü° Alertas de advertencia:"
    echo "  - [WARNING] Aumento en logs de error"
    echo "  - [WARNING] ConfigMap modificado recientemente"
    echo ""
    
    echo "üìß Notificaciones enviadas:"
    echo "  - Email: admin@company.com"
    echo "  - Slack: #kubernetes-alerts"
    echo "  - PagerDuty: Escalation Level 2"
    echo ""
}

# Ejecutar monitoreo
echo "üïê Timestamp: $(date)"
echo ""

# Verificar si el namespace existe
if kubectl get namespace $NAMESPACE >/dev/null 2>&1; then
    echo "‚úÖ Namespace $NAMESPACE encontrado"
    echo ""
    
    # Simular consultas de CloudWatch
    simulate_cloudwatch_query "error_logs" "Logs de error relacionados con configuraci√≥n faltante"
    simulate_cloudwatch_query "pod_restarts" "Estad√≠sticas de reinicio de pods"
    simulate_cloudwatch_query "application_logs" "Logs normales de la aplicaci√≥n antes del error"
    simulate_cloudwatch_query "kubernetes_events" "Eventos de Kubernetes relacionados con el problema"
    
    # Mostrar m√©tricas y dashboard
    show_cloudwatch_metrics
    show_cloudwatch_dashboard
    show_cloudwatch_alerts
    
    echo "üí° RECOMENDACIONES DE DIAGN√ìSTICO:"
    echo "=================================="
    echo "1. Revisar logs de error para identificar variables faltantes"
    echo "2. Verificar cambios recientes en ConfigMaps"
    echo "3. Comprobar que todas las variables de entorno est√©n definidas"
    echo "4. Validar la configuraci√≥n antes de aplicar cambios"
    echo "5. Implementar pruebas de configuraci√≥n en CI/CD"
    echo ""
    
else
    echo "‚ùå Namespace $NAMESPACE no encontrado"
    echo "Ejecute primero el script de prueba: ./scripts/configmap-error-test.sh"
fi 